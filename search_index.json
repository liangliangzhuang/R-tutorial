[["some-tips.html", "5 常用案例 5.1 绘制不同分布的 QQ 图 5.2 绘制混合密度函数图以及添加分位数线 5.3 绘制不同参数的密度函数", " 5 常用案例 5.1 绘制不同分布的 QQ 图 这里主要是用 qqplotr 包进行绘制，参考的博客：An Introduction to qqplotr。 5.1.1 简单版本 5.1.1.1 绘制正态分布的 QQ 图 library(qqplotr) library(ggplot2) # 随机产生数据 set.seed(0) smp &lt;- data.frame(norm = rnorm(100)) # 绘制 gg &lt;- ggplot(data = smp, mapping = aes(sample = norm)) + stat_qq_band() + stat_qq_line() + stat_qq_point() + labs(x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) gg 使用三种不同的置信带构造置信区间，其可以用参数 bandType 调整。 library(viridis) gg &lt;- ggplot(data = smp, mapping = aes(sample = norm)) + geom_qq_band(bandType = &quot;ks&quot;, mapping = aes(fill = &quot;KS&quot;), alpha = 0.9) + geom_qq_band(bandType = &quot;ts&quot;, mapping = aes(fill = &quot;TS&quot;), alpha = 0.9) + geom_qq_band(bandType = &quot;pointwise&quot;, mapping = aes(fill = &quot;Normal&quot;), alpha = 0.9) + geom_qq_band(bandType = &quot;boot&quot;, mapping = aes(fill = &quot;Bootstrap&quot;), alpha = 0.9) + stat_qq_line() + stat_qq_point() + labs(x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) + scale_fill_viridis(discrete = T, direction = -1) gg 5.1.2 进阶版本 读者绘制正态分布的 QQ 图，还是比较简单。但是如果是其他分布的情况呢？ 这里以一个可靠性数据为例子，该数据来源于文献：Badar, M. G., Priest, A. M. (1982). Statistical aspects of fiber and bundle strength in hybrid composites. In: Hayashi, T., Kawata, K., Umekawa, S., eds. Progress in Science and Engineering Composites. Tokyo: ICCM-IV, pp. 1129–1136。 data = data.frame(y = c(1.339, 1.434, 1.549, 1.574, 1.589, 1.613, 1.746, 1.753, 1.764, 1.807, 1.812, 1.84, 1.852, 1.852, 1.862, 1.864, 1.931, 1.952, 1.974, 2.019, 2.051, 2.055, 2.058, 2.088, 2.125, 2.162, 2.171, 2.172, 2.18, 2.194, 2.211, 2.27, 2.272, 2.28, 2.299, 2.308, 2.335, 2.349, 2.356, 2.386, 2.39, 2.41, 2.43, 2.431, 2.458, 2.471, 2.497, 2.514, 2.558, 2.577, 2.593, 2.601, 2.604, 2.62, 2.633, 2.67, 2.682, 2.699, 2.705, 2.735, 2.785, 2.785, 3.02, 3.042, 3.116, 3.174)) 5.1.2.1 绘制指数分布的 QQ 图 这里我们绘制其指数分布的 QQ 图。根据指数函数参数拟合该数据之后，得到rate =2.2867，并将其保存到 list 中。 具体如何拟合，读者自行搜索 R 包中的相关函数。 其他代码基本不变，主要是将 stat_qq_line() 和 stat_qq_point() 中的分布设定下，参数设定下。 # exponential distribution dp &lt;- list(rate = 2.2867) di &lt;- &quot;exp&quot; p1 = ggplot(data = data, mapping = aes(sample = y)) + stat_qq_band(distribution = di, dparams = dp) + stat_qq_line(distribution = di, dparams = dp) + stat_qq_point(distribution = di, dparams = dp) + labs(x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) + theme_bw() + theme(panel.grid = element_blank()) p1 5.1.2.2 绘制威布尔分布的 QQ 图 同理，将该数据应用到威布尔分布中。结果如下： # weibull distribution di &lt;- &quot;weibull&quot; # exponential distribution dp &lt;- list(shape = 5.4766, scale = 2.4113) p2 = ggplot(data = data, mapping = aes(sample = y)) + stat_qq_band(distribution = di, dparams = dp) + stat_qq_line(distribution = di, dparams = dp) + stat_qq_point(distribution = di, dparams = dp) + labs(x = &quot;Theoretical Quantiles&quot;, y = &quot;Sample Quantiles&quot;) + theme_bw() + theme(panel.grid = element_blank()) p2 可以看到该数据集，更适合使用 weibull分布进行拟合。 library(cowplot) plot_grid(p1, p2, ncol = 2, nrow = 1) 5.2 绘制混合密度函数图以及添加分位数线 主要使用 ggridges 包中的 stat_density_ridges()。参考的博客：https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html 5.2.1 加载包 library(ggplot2) library(ggridges) 5.2.2 产生数据集 假设数据来源于一个混合分布。 item &lt;- 10000 inds &lt;- rbinom(1, item, 0.5) x &lt;- c(rnorm(inds, 1, 1), rnorm(item - inds, 8, 1)) data &lt;- data.frame(value = x, class = rep(1, length(x))) 5.2.3 绘制密度函数图并添加分位数线 # 绘图 p1 &lt;- ggplot(data, aes(x = value, y = class, fill = factor(stat(quantile)))) + stat_density_ridges(geom = &quot;density_ridges_gradient&quot;, calc_ecdf = TRUE, quantiles = c(0.025, 0.975)) + scale_fill_manual(name = &quot;Probability&quot;, values = c(&quot;#E2EAF6&quot;, &quot;#436FB0&quot;, &quot;#E2EAF6&quot;)) + theme_bw() + theme(legend.position = &quot;none&quot;, panel.grid = element_blank()) + labs(x = &quot;x&quot;, y = &quot;Density&quot;) p1 p2 &lt;- ggplot(data, aes(x = value, y = class, fill = factor(stat(quantile)))) + stat_density_ridges(geom = &quot;density_ridges_gradient&quot;, calc_ecdf = TRUE, quantiles = c(0.005, 0.495, 0.51, 0.99)) + scale_fill_manual(name = &quot;Probability&quot;, values = c(&quot;#E2EAF6&quot;, &quot;#436FB0&quot;, &quot;#E2EAF6&quot;, &quot;#436FB0&quot;, &quot;#E2EAF6&quot;), ) + theme_bw() + theme(legend.position = &quot;none&quot;, panel.grid = element_blank()) + labs(x = &quot;x&quot;, y = &quot;Density&quot;) p2 5.2.4 合并两图（使用cowplot包） library(cowplot) # pdf(&#39;plot_cow.pdf&#39;, width = 8, height = 4) plot_grid(p1, p2, ncol = 1, nrow = 2) # dev.off() 5.3 绘制不同参数的密度函数 5.3.1 Beta 密度函数 绘制不同参数下的 Beta 密度函数。具体该分布的介绍可见：https://en.wikipedia.org/wiki/Beta_distribution Beta函数如下： \\[ B(a,b) = \\int_{0}^{1} x^{a-1} {(1-x)}^{b-1} dx,\\quad a,b&gt;0 \\] Beta 分布： 随机变量 X 的密度函数为： \\[p(x) = \\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\\] 存在问题：还未把各个密度函数的参数加入。 ## Beta Distribution library(ggplot2) library(reshape2) library(ggsci) item = 1000 x &lt;- seq(0, 1, length = item) beta_dist &lt;- data.frame(cbind(x, dbeta(x, 0.5, 0.5), dbeta(x, 2, 2), dbeta(x, 0.5, 2), dbeta(x, 2, 0.5), dbeta(x, 1, 5), dbeta(x, 5, 1), dbeta(x, 1, 1))) colnames(beta_dist) &lt;- c(&quot;x&quot;, &quot;a=0.5,b=0.5&quot;, &quot;a=2,b=2&quot;, &quot;a=0.5,b=2&quot;, &quot;a=2,b=0.5&quot;, &quot;a=1,b=5&quot;, &quot;a=5,b=1&quot;, &quot;a=1,b=1&quot;) beta_dist &lt;- melt(beta_dist, x) beta_dist$class = c(rep(1:3, each = 2 * item), rep(4, item)) g &lt;- ggplot(beta_dist, aes(x, value, color = variable)) g + geom_line() + facet_wrap(vars(class), scales = &quot;free_y&quot;) + labs(title = &quot;Beta Distribution&quot;, x = &quot;x&quot;, y = &quot;Probability&quot;) + scale_color_aaas() + theme_bw() + theme(panel.grid = element_blank(), legend.position = &quot;none&quot;) "]]
